# -*- coding: utf-8 -*-
"""PickSort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hHGTOiIAUOwtP39scaQdYylVuPVmGCew
"""

# Importing Random Library 
import random

def create_list(n,a): 
  '''
  Creates a list with random numbers beteween [0,n).
  Arguments:
      1. n -> the length of our list.
      2. a -> the range of numbers that can be appended to the list.
  Returns:
      1. An Unsorted List.
  '''
  random_list = [] # initialise a list.
  for i in range(n): # for a range of n.
    random_list.append(random.randint(0,a)) # Append a random number between 0 -> a, to the initialised list.
  return random_list

def is_sorted(L):
  '''
  This function checks if the given list is sorted or not.
    Arguments:
      1. A list L.
    Returns:
      1. True or False.
  '''
  for i in range(len(L)-1): # for every number in my list.
    if L[i] <= L[i+1]: # Check if the (i)th number is less than or equal to (i+1)th number.
      pass # if it is then pass onto the next iteration.
    else:
      return False # if it is not even for number return False, because that means the list is not sorted.
  return True # If (i)th element is <= (i+1)th element for every element in my list then return True.

def picksort(myList):
  '''
  The Picksort function:
  Arguments:
    1. An Unroted List called myList.
  Returns:
    1. A sorted List.
  '''
  while not is_sorted(myList): # While myList is not sorted (Utilises the is_sorted() function).
    
    random_index_1 = random.randint(0,len(myList)-1) # Pick a random index called random_index_1 in the range of the length of myList
    random_index_2 = random.randint(0,len(myList)-1) # Pick another random index called random_index_2 in the range of the length of myList

    if myList[random_index_1] > myList[random_index_2]: # if the element at random_index_1 is greater than the element at random_index_2
      # make the element at random_index_1 the element at random_index_2
      # and the element at random_index_2 the element at random_index_1
      myList[random_index_1], myList[random_index_2] = myList[random_index_2], myList[random_index_1]

  return myList # finally return the sorted myList

print(picksort(create_list(8,100)))